#!/usr/bin/env node

/*
 * Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license.
 * See LICENSE in the project root for license information.
 */

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('office-add-in-nodejs-serverauth:server');
var https = require('https');
var certConf = require('../certconf');
var sqlite3 = require('sqlite3').verbose();
var fs = require('fs');

/**
 * Create SQLite3 database
 */
var dbFile = './db/database.sqlite3';
var dbExists = fs.existsSync(dbFile);
var db = new sqlite3.Database(dbFile);
var createTableStatement = 'CREATE TABLE UserData (' +
                               'SessionID TEXT NOT NULL, ' + 
                               'Provider TEXT  NOT NULL, ' +
                               'AccessToken TEXT NOT NULL, ' + 
                               'PRIMARY KEY (SessionID, Provider)' +
                           ');';

db.serialize(function() {
    if(!dbExists) {
        db.run(createTableStatement,
               [],
               function (error) { 
                   console.log('Error creating UserData table: ' + error);
               }
              );
    }
});
db.close();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = https.createServer(certConf, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
